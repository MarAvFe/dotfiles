# ====================== START PS1 ======================
# \a    an ASCII bell character (07)
# \d  the date in "Weekday Month Date" format (e.g., "Tue May 26")
# \]  end a sequence of non-printing characters
# \e  an ASCII escape character (033)
# \h  the hostname up to the first `.'
# \H  the hostname
# \j  the number of jobs currently managed by the shell
# \l  the basename of the shell's terminal device name
# \n  newline
# \r  carriage return
# \s  the name of the shell, the basename of $0 (the portion following the final slash)
# \t  the current time in 24-hour HH:MM:SS format
# \T  the current time in 12-hour HH:MM:SS format
# \@  the current time in 12-hour am/pm format
# \A  the current time in 24-hour HH:MM format
# \u  the username of the current user
# \v  the version of bash (e.g., 2.00)
# \V  the release of bash, version + patchelvel (e.g., 2.00.0)
# \w  the current working directory
# \W  the basename of the current working directory
# \!  the history number of this command
# \#  the command number of this command
        # \$  if the effective UID is 0, a #, otherwise a $
        #  \nnn    the character corresponding to the octal number nnn
        #  \\  a backslash
        #  \[  begin a sequence of non-printing characters, which could be used to embed a terminal control sequence into the prompt
#PS1='\[\e[1;32m\]\t \[\e[1;35m\]\u\[\e[1;34m\] \W\a\[\033[00m\]\$ '
#PS1='\[\e[1;32m\]┌─\t \[\e[1;35m\]\u\[\e[1;34m\] \W\a/\n\[\e[1;32m\]└\[\033[    00m\]\$ '

# Normal Colors
Black='\[\e[0;30m\]'        # Black
Red='\[\e[0;31m\]'          # Red
Green='\[\e[0;32m\]'        # Green
Yellow='\[\e[0;33m\]'       # Yellow
Blue='\[\e[0;34m\]'         # Blue
Purple='\[\e[0;35m\]'       # Purple
Cyan='\[\e[0;36m\]'         # Cyan
White='\[\e[0;37m\]'        # White
Gray='\[\e[0;90m\]'         # Gray

# Bold
BBlack='\[\e[1;30m\]'       # Black
BRed='\[\e[1;31m\]'         # Red
BGreen='\[\e[1;32m\]'       # Green
BYellow='\[\e[1;33m\]'      # Yellow
BBlue='\[\e[1;34m\]'        # Blue
BPurple='\[\e[1;35m\]'      # Purple
BCyan='\[\e[1;36m\]'        # Cyan
BWhite='\[\e[1;37m\]'       # White

# Background
On_Black='\[\e[40m\]'       # Black
On_Red='\[\e[41m\]'         # Red
On_Green='\[\e[42m\]'       # Green
On_Yellow='\[\e[43m\]'      # Yellow
On_Blue='\[\e[44m\]'        # Blue
On_Purple='\[\e[45m\]'      # Purple
On_Cyan='\[\e[46m\]'        # Cyan
On_White='\[\e[47m\]'       # White

NC='\[\e[m\]' # Color Reset

git_branch() {
    local branch=$(git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
    if [[ -z $branch ]]; then
        # Not in a git repository
        echo ""
        return
    fi

    local status=$(git status --porcelain)
    local staged=$(echo "$status" | grep '^M\|^A' | wc -l)
    local unstaged=$(echo "$status" | grep '^ M\|^ A' | wc -l)
    # this has bugs ^ it will not double count a file that's both staged and unstaged

    if [[ $staged -eq 0 && $unstaged -eq 0 ]]; then
        # No changes
        echo "[$branch]"
    else
        # Changes present
        echo "[$branch u:$unstaged s:$staged]"
    fi
}

if [ $UID -eq 0 ]; then
     isRoot=$On_Red$BWhite
else
     isRoot=$Purple
fi

PS1="\
$Green┌─\D{%m/%d}@\A \
$NC$isRoot\u\
$NC$BBlue \W\
$NC$Gray \$(git_branch) \
$NC$Green\n└$NC\\$ "
# ====================== END PS1 ======================
